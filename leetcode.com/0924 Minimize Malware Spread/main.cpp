#include <iostream>
#include <stack>
#include <vector>

using namespace std;

class Solution {
 public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    int mx = 0 /* max infected island */, res = initial[0];
    vector<bool> v0(n), v(n);
    for (int x : initial) v0[x] = true, res = min(res, x);
    stack<int> stk;
    for (int i = 0; i < n; ++i)
      if (v0[i]) {
        if (v[i]) continue;
        // dfs(i)
        stk.push(i);
        v[i] = true;
        int sz = 1;
        bool ok = true;
        while (!stk.empty()) {
          int ii = stk.top();
          stk.pop();
          for (int j = 0; j < n; ++j) {
            if (graph[ii][j] == 0 || v[j]) continue;
            v[j] = true;
            stk.push(j);
            if (!ok) continue;  // at least two initial infection on this island
            if (v0[j]) {
              ok = false;
            } else {
              ++sz;
            }
          }
        }
        if (ok && sz > mx) {
          mx = sz;
          res = i;
        }
      }
    return res;
  }
};

int main(int argc, char const* argv[]) {
  Solution s;
  vector<vector<int>> g = {
      {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1}, {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
      {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0},
      {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0},
      {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}};
  vector<int> init = {7, 8, 6, 2, 3};
  cout << s.minMalwareSpread(g, init) << endl;
  return 0;
}
